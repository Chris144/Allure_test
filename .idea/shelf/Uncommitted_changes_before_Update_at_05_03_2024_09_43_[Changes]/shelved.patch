Index: Projekt/tests/registration_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\r\n\r\nfrom selenium.webdriver.common.by import By\r\nfrom selenium.webdriver import ActionChains\r\nfrom Projekt.tests.base_test import BaseTest\r\nfrom Projekt.utils.locators import AccountLocators\r\nfrom Projekt.test_data.registration_data import AccountData\r\n\r\n\r\nclass RegistrationTest(BaseTest):\r\n    def setUp(self):\r\n        super().setUp()\r\n        self.test_data = AccountData()\r\n\r\n    def screenshot(self):\r\n        super().screenshot()\r\n\r\n    \"\"\"\r\n    Test checking user registration - positive\r\n    \"\"\"\r\n\r\n    def test_registration_positive(self):\r\n        # 1. Checking whether the Hoover is visible when you hover the mouse over it\r\n        element_to_account = self.driver.find_element(*AccountLocators.ACCOUNT_LOCATOR)\r\n        action = ActionChains(self.driver)\r\n        action.move_to_element(element_to_account).perform()\r\n        # 2. Use the button to go to the registration page\r\n        element_to_account.click()\r\n        # 3. Enter the correct email\r\n        self.driver.find_element(*AccountLocators.REGISTER_EMAIL).send_keys(self.test_data.registration_email)\r\n        # 4. Enter the correct password\r\n        self.driver.find_element(*AccountLocators.REGISTER_PASSWORD).send_keys(self.test_data.registration_password)\r\n        time.sleep(5)\r\n        # 5 Click again in the anywhere for the Register button to activate\r\n        self.driver.find_element(*AccountLocators.REGISTER_OUT_CLICK).click()\r\n        # 6. Click the \"Register\" button\r\n        self.driver.find_element(*AccountLocators.REGISTER_BUTTON).click()\r\n        # 7. Taking a screenshot\r\n        self.screenshot()\r\n\r\n    \"\"\"\r\n        Test checking user registration - no email\r\n    \"\"\"\r\n\r\n    def test_registration_no_email(self):\r\n        # 1. CLick the button to go to the registration page\r\n        element_to_account = self.driver.find_element(*AccountLocators.ACCOUNT_LOCATOR)\r\n        element_to_account.click()\r\n        # 2. Do not provide an e-mail address\r\n        # 3. Enter the correct password\r\n        self.driver.find_element(*AccountLocators.REGISTER_PASSWORD).send_keys(self.test_data.registration_password)\r\n        # 5 Click again in the anywhere for the Register button to activate\r\n        time.sleep(3)\r\n        self.driver.find_element(*AccountLocators.REGISTER_OUT_CLICK).click()\r\n        # 6. Click the \"Register\" button\r\n        self.driver.find_element(*AccountLocators.REGISTER_BUTTON).click()\r\n        # 7. Taking a screenshot\r\n        self.screenshot()\r\n        # 8. Checking the expected effect\r\n        error_mail = self.driver.find_element(By.CLASS_NAME, 'woocommerce-error')\r\n        self.assertEqual(\"Error: Please provide a valid email address.\", error_mail.text)\r\n        print(error_mail.text)\r\n\r\n    \"\"\"\r\n        Test checking user registration - no password\r\n    \"\"\"\r\n\r\n    def test_registration_no_password(self):\r\n        # 1. Click the button to go to the registration page\r\n        element_to_account = self.driver.find_element(*AccountLocators.ACCOUNT_LOCATOR)\r\n        element_to_account.click()\r\n        # 2. Enter the correct email\r\n        self.driver.find_element(*AccountLocators.REGISTER_EMAIL).send_keys(self.test_data.registration_email)\r\n        time.sleep(3)\r\n        # 3. Do not provide a password\r\n        # 4 Click again in the anywhere for the Register button to activate\r\n        self.driver.find_element(*AccountLocators.REGISTER_OUT_CLICK).click()\r\n        # 5. Click the \"Register\" button\r\n        self.driver.find_element(*AccountLocators.REGISTER_BUTTON).click()\r\n        # 7. Taking a screenshot\r\n        self.screenshot()\r\n        # 8. Checking the expected effect\r\n        error_password = self.driver.find_element(By.CLASS_NAME, 'woocommerce-error')\r\n        self.assertEqual(\"Error: Please enter an account password.\", error_password.text)\r\n        print(error_password.text)\r\n\r\n    \"\"\"\r\n          A test checking if the button is active or not depending on strength password\r\n          1. Very_Week_Password - Button register should be Disabled\r\n          2. Week_Password - Button register should be Disabled\r\n          3. Medium - Button register should be Enabled\r\n          4. Strong - Button register should be Enabled\r\n    \"\"\"\r\n\r\n    def test_registration_button_enabled_or_disabled(self):\r\n        # 1. Click the button to go to the registration page\r\n        element_to_account = self.driver.find_element(*AccountLocators.ACCOUNT_LOCATOR)\r\n        element_to_account.click()\r\n        # 2. Enter appropriate length password to check button\r\n        self.driver.find_element(*AccountLocators.REGISTER_PASSWORD).send_keys('123')\r\n        time.sleep(3)\r\n        # 3. Click again in the anywhere for the Register button to activate\r\n        self.driver.find_element(*AccountLocators.REGISTER_OUT_CLICK).click()\r\n        # 4. Locating password strength information\r\n        if self.driver.find_element(*AccountLocators.STRONG_OF_PASSWORD).text:\r\n            # 5. Checking if the button is active or not - FALSE or TRUE\r\n            self.driver.find_element(*AccountLocators.REGISTER_BUTTON).is_enabled()\r\n            # 6. Printing whether the button is active or not\r\n            print(self.driver.find_element(*AccountLocators.REGISTER_BUTTON).is_enabled())\r\n        # 7. Taking a screenshot\r\n        self.screenshot()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Projekt/tests/registration_test.py b/Projekt/tests/registration_test.py
--- a/Projekt/tests/registration_test.py	(revision 75ae1f1cb4125ab378e76c50c3ffde0ec90752c9)
+++ b/Projekt/tests/registration_test.py	(date 1709305146218)
@@ -3,8 +3,8 @@
 from selenium.webdriver.common.by import By
 from selenium.webdriver import ActionChains
 from Projekt.tests.base_test import BaseTest
-from Projekt.utils.locators import AccountLocators
-from Projekt.test_data.registration_data import AccountData
+from Projekt.utils.account_locator import AccountLocators
+from Projekt.test_data.data_for_tests import AccountData
 
 
 class RegistrationTest(BaseTest):
@@ -27,15 +27,17 @@
         # 2. Use the button to go to the registration page
         element_to_account.click()
         # 3. Enter the correct email
-        self.driver.find_element(*AccountLocators.REGISTER_EMAIL).send_keys(self.test_data.registration_email)
+        self.driver.find_element(*AccountLocators.REGISTER_EMAIL).send_keys('jaimechapman@example.net')
         # 4. Enter the correct password
-        self.driver.find_element(*AccountLocators.REGISTER_PASSWORD).send_keys(self.test_data.registration_password)
-        time.sleep(5)
-        # 5 Click again in the anywhere for the Register button to activate
+        self.driver.find_element(*AccountLocators.REGISTER_PASSWORD).send_keys('Qwerty144[])')
+        time.sleep(3)
+        # 5. Taking a screenshot
+        self.screenshot()
+        # 6. Click again in the anywhere for the Register button to activate
         self.driver.find_element(*AccountLocators.REGISTER_OUT_CLICK).click()
-        # 6. Click the "Register" button
+        # 7. Click the "Register" button
         self.driver.find_element(*AccountLocators.REGISTER_BUTTON).click()
-        # 7. Taking a screenshot
+        # 8. Taking a screenshot
         self.screenshot()
 
     """
@@ -47,9 +49,13 @@
         element_to_account = self.driver.find_element(*AccountLocators.ACCOUNT_LOCATOR)
         element_to_account.click()
         # 2. Do not provide an e-mail address
+        self.driver.find_element(*AccountLocators.REGISTER_EMAIL).send_keys()
         # 3. Enter the correct password
         self.driver.find_element(*AccountLocators.REGISTER_PASSWORD).send_keys(self.test_data.registration_password)
-        # 5 Click again in the anywhere for the Register button to activate
+        time.sleep(3)
+        # 4. Taking a screenshot
+        self.screenshot()
+        # 5. Click again in the anywhere for the Register button to activate
         time.sleep(3)
         self.driver.find_element(*AccountLocators.REGISTER_OUT_CLICK).click()
         # 6. Click the "Register" button
@@ -72,10 +78,12 @@
         # 2. Enter the correct email
         self.driver.find_element(*AccountLocators.REGISTER_EMAIL).send_keys(self.test_data.registration_email)
         time.sleep(3)
-        # 3. Do not provide a password
-        # 4 Click again in the anywhere for the Register button to activate
+        # 3. Taking a screenshot
+        self.screenshot()
+        # 4. Do not provide a password
+        # 5 Click again in the anywhere for the Register button to activate
         self.driver.find_element(*AccountLocators.REGISTER_OUT_CLICK).click()
-        # 5. Click the "Register" button
+        # 6. Click the "Register" button
         self.driver.find_element(*AccountLocators.REGISTER_BUTTON).click()
         # 7. Taking a screenshot
         self.screenshot()
@@ -97,7 +105,7 @@
         element_to_account = self.driver.find_element(*AccountLocators.ACCOUNT_LOCATOR)
         element_to_account.click()
         # 2. Enter appropriate length password to check button
-        self.driver.find_element(*AccountLocators.REGISTER_PASSWORD).send_keys('123')
+        self.driver.find_element(*AccountLocators.REGISTER_PASSWORD).send_keys('123qweq[]Wsd13Rt43+')
         time.sleep(3)
         # 3. Click again in the anywhere for the Register button to activate
         self.driver.find_element(*AccountLocators.REGISTER_OUT_CLICK).click()
Index: Projekt/tests/base_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import unittest\r\nfrom datetime import time, datetime\r\n\r\nfrom selenium import webdriver\r\nfrom PIL import ImageGrab\r\n\r\n\"\"\"\r\nBase test for each page\r\n\"\"\"\r\n\r\n\r\nclass BaseTest(unittest.TestCase):\r\n    def setUp(self):\r\n        self.driver = webdriver.Firefox()\r\n        self.driver.maximize_window()\r\n        self.driver.get(\"https://skleptest.pl/\")\r\n        self.driver.implicitly_wait(10)\r\n\r\n    def screenshot(self):\r\n        self.screenshot = ImageGrab.grab()\r\n        datetime.now()\r\n        screenDatetime = datetime.now().strftime('%d-%m-%Y-%H-%M-%S')\r\n        self.driver.save_screenshot(f\"../screenshot_from_tests/account_screen/screenshot-{screenDatetime}.png\")\r\n        self.screenshot.close()\r\n\r\n    def tearDown(self):\r\n        self.driver.quit()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Projekt/tests/base_test.py b/Projekt/tests/base_test.py
--- a/Projekt/tests/base_test.py	(revision 75ae1f1cb4125ab378e76c50c3ffde0ec90752c9)
+++ b/Projekt/tests/base_test.py	(date 1709236191635)
@@ -1,8 +1,6 @@
 import unittest
-from datetime import time, datetime
-
+from datetime import datetime
 from selenium import webdriver
-from PIL import ImageGrab
 
 """
 Base test for each page
@@ -17,11 +15,9 @@
         self.driver.implicitly_wait(10)
 
     def screenshot(self):
-        self.screenshot = ImageGrab.grab()
         datetime.now()
         screenDatetime = datetime.now().strftime('%d-%m-%Y-%H-%M-%S')
-        self.driver.save_screenshot(f"../screenshot_from_tests/account_screen/screenshot-{screenDatetime}.png")
-        self.screenshot.close()
+        self.driver.save_screenshot(f"../screen_tests/screenshot-{screenDatetime}.png")
 
     def tearDown(self):
-        self.driver.quit()
\ No newline at end of file
+        self.driver.quit()
Index: Projekt/utils/locators.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Projekt/utils/locators.py b/Projekt/utils/account_locator.py
rename from Projekt/utils/locators.py
rename to Projekt/utils/account_locator.py
--- a/Projekt/utils/locators.py	(revision 75ae1f1cb4125ab378e76c50c3ffde0ec90752c9)
+++ b/Projekt/utils/account_locator.py	(date 1708878547522)
@@ -9,4 +9,8 @@
     REGISTER_BUTTON = (By.XPATH, '//input[@name="register"]')
     REGISTER_OUT_CLICK = (By.XPATH, '//label[@for="reg_password"]')
     STRONG_OF_PASSWORD = (By.XPATH, '//div[@aria-live="polite"]')
-
+    # Login locators
+    LOGIN_EMAIL = (By.ID, 'username')
+    LOGIN_PASSWORD = (By.ID, 'password')
+    LOGIN_BUTTON = (By.XPATH, '//input[@name="login"]')
+    LOGIN_REMEMBER_ME = (By.ID, 'rememberme')
diff --git a/Projekt/test_data/registration_data.py b/Projekt/test_data/data_for_tests.py
rename from Projekt/test_data/registration_data.py
rename to Projekt/test_data/data_for_tests.py
